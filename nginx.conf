# /etc/nginx/nginx.conf
# Monolithic config with server blocks for Snapped Backend (Ubuntu)

user www-data;
worker_processes auto;
pid /run/nginx.pid;

# Load dynamic modules.
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
    # multi_accept on;
}

http {
    ##
    # Basic settings
    ##
    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    ##
    # Logs
    ##
    # You can customize log_format if needed; default 'combined' is fine.
    access_log  /var/log/nginx/access.log;
    error_log   /var/log/nginx/error.log;

    ##
    # Rate limit zones (http context ONLY)
    ##
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/s;

    ##
    # Gzip
    ##
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    ##
    # Upstream to Gunicorn (optional helper)
    ##
    upstream snapped_backend {
        server 127.0.0.1:8000;
        keepalive 32;
    }

    ##
    # Map for websocket upgrade (harmless if unused)
    ##
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    ##
    # Server: HTTP -> HTTPS redirect
    ##
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name your-domain.com www.your-domain.com;

        # Allow Certbot HTTP-01 challenge before redirect
        location ^~ /.well-known/acme-challenge/ {
            root /var/www/html;
            default_type "text/plain";
        }

        return 301 https://$host$request_uri;
    }

    ##
    # Server: HTTPS
    ##
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name your-domain.com www.your-domain.com;

        # ----- SSL (replace with your real cert/key paths or use certbot) -----
        ssl_certificate     /etc/ssl/certs/your-domain.crt;
        ssl_certificate_key /etc/ssl/private/your-domain.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # (Optional) Stapling if using a public CA and you have resolvers configured
        # ssl_stapling on;
        # ssl_stapling_verify on;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        # Body size for uploads
        client_max_body_size 20M;

        # Logs for this vhost
        access_log /var/log/nginx/snapped_access.log;
        error_log  /var/log/nginx/snapped_error.log;

        # Serve static files
        location /static/ {
            alias /opt/snapped_backend/app/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # API (rate-limited)
        location /api/ {
            limit_req zone=api burst=20 nodelay;

            proxy_pass http://snapped_backend;
            proxy_http_version 1.1;
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket compatibility (harmless for normal HTTP)
            proxy_set_header Upgrade           $http_upgrade;
            proxy_set_header Connection        $connection_upgrade;

            proxy_connect_timeout 30s;
            proxy_send_timeout    30s;
            proxy_read_timeout    30s;
            proxy_buffering off;
        }

        # Upload endpoint (stricter rate limit)
        location = /api/v1/images/upload {
            limit_req zone=upload burst=5 nodelay;

            proxy_pass http://snapped_backend;
            proxy_http_version 1.1;
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade           $http_upgrade;
            proxy_set_header Connection        $connection_upgrade;

            proxy_connect_timeout 60s;
            proxy_send_timeout    60s;
            proxy_read_timeout    60s;
            proxy_buffering off;
        }

        # Health check
        location = /health {
            proxy_pass http://snapped_backend;
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            access_log off;
        }

        # Root -> app
        location / {
            proxy_pass http://snapped_backend;
            proxy_http_version 1.1;
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade           $http_upgrade;
            proxy_set_header Connection        $connection_upgrade;

            proxy_connect_timeout 30s;
            proxy_send_timeout    30s;
            proxy_read_timeout    30s;
        }

        # Optional custom error pages (provide files under /var/www/html or remove)
        error_page 404 /404.html;
        location = /404.html { root /var/www/html; internal; }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html { root /var/www/html; internal; }
    }

    # You can still include extra conf fragments if needed.
    # include /etc/nginx/conf.d/*.conf;
    # include /etc/nginx/sites-enabled/*;
}
