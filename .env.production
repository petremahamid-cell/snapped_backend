#!/bin/bash
#
# AWS EC2 Installation Script for Snapped Backend (Ubuntu 22.04 LTS)
# - Uses Python 3.11 venv
# - Gunicorn managed by systemd
# - Nginx reverse proxy (HTTP only by default; add HTTPS later with Certbot)
# - Redis enabled
# - UFW firewall
# - Logrotate, health & backup scripts
#
# NOTE: Do NOT hard-code SSL certs here. Use: sudo certbot --nginx -d your-domain.com -d www.your-domain.com
#

set -euo pipefail

echo "🚀 Starting Snapped Backend installation on AWS EC2..."

#----------------------------
# System update & packages
#----------------------------
echo "📦 Updating system packages..."
sudo apt update && sudo apt -y upgrade

echo "🔧 Installing system dependencies..."
sudo apt install -y \
  python3.11 python3.11-venv python3.11-dev \
  python3-pip \
  nginx \
  redis-server \
  git curl wget unzip \
  htop ufw \
  certbot python3-certbot-nginx \
  build-essential libpq-dev libjpeg-dev libpng-dev libfreetype6-dev pkg-config

#----------------------------
# App user & directories
#----------------------------
echo "👤 Creating application user..."
if ! id -u snapped >/dev/null 2>&1; then
  sudo useradd -m -s /bin/bash snapped
fi
sudo usermod -aG sudo snapped

echo "📁 Creating application directories..."
sudo mkdir -p /opt/snapped_backend
sudo mkdir -p /var/log/snapped
sudo mkdir -p /var/run/snapped
sudo chown -R snapped:snapped /opt/snapped_backend /var/log/snapped /var/run/snapped

#----------------------------
# Clone repo (edit the URL!)
#----------------------------
echo "📥 Cloning repository..."
cd /opt
if [ ! -d "/opt/snapped_backend/.git" ]; then
  sudo git clone https://github.com/your-username/snapped_backend.git snapped_backend
  sudo chown -R snapped:snapped /opt/snapped_backend
else
  echo "Repo already present, skipping clone."
fi

#----------------------------
# Python env & deps
#----------------------------
echo "🐍 Setting up Python environment..."
sudo -u snapped bash <<'EOF'
set -euo pipefail
cd /opt/snapped_backend
python3.11 -m venv venv
source venv/bin/activate
pip install --upgrade pip
if [ -f requirements.txt ]; then
  pip install -r requirements.txt
fi
# Create .env from production template if present
if [ -f .env.production ] && [ ! -f .env ]; then
  cp .env.production .env
fi
EOF

#----------------------------
# Redis
#----------------------------
echo "🔴 Configuring Redis..."
sudo systemctl enable redis-server
sudo systemctl restart redis-server

#----------------------------
# Nginx (HTTP only for now)
#   - Define rate-limit zones at http-level (conf.d)
#   - Site file proxies to Gunicorn at 127.0.0.1:8000
#   - No SSL in site file; Certbot will inject later
#----------------------------
echo "🌐 Configuring Nginx..."
# Rate-limit zones (http context)
sudo mkdir -p /etc/nginx/conf.d
sudo tee /etc/nginx/conf.d/snapped_rate_limit.conf >/dev/null <<'NGX'
# http{} context only
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/s;
NGX

# Site config (no SSL)
sudo tee /etc/nginx/sites-available/snapped_backend >/dev/null <<'NGX'
server {
    listen 80;
    server_name _;

    # Increase for file uploads if needed
    client_max_body_size 20M;

    access_log /var/log/nginx/snapped_access.log;
    error_log  /var/log/nginx/snapped_error.log;

    # Static files
    location /static/ {
        alias /opt/snapped_backend/app/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # API (rate-limited)
    location /api/ {
        limit_req zone=api burst=20 nodelay;

        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;

        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket headers are harmless if not used
        proxy_set_header Upgrade           $http_upgrade;
        proxy_set_header Connection        "upgrade";

        proxy_connect_timeout 30s;
        proxy_send_timeout    30s;
        proxy_read_timeout    30s;
        proxy_buffering off;
    }

    # Upload endpoint (stricter rate-limit)
    location = /api/v1/images/upload {
        limit_req zone=upload burst=5 nodelay;

        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;

        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade           $http_upgrade;
        proxy_set_header Connection        "upgrade";

        proxy_connect_timeout 60s;
        proxy_send_timeout    60s;
        proxy_read_timeout    60s;
        proxy_buffering off;
    }

    # Health check
    location = /health {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        access_log off;
    }

    # Default: proxy to app
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;

        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade           $http_upgrade;
        proxy_set_header Connection        "upgrade";

        proxy_connect_timeout 30s;
        proxy_send_timeout    30s;
        proxy_read_timeout    30s;
    }
}
NGX

# Enable the site and remove default
sudo ln -sf /etc/nginx/sites-available/snapped_backend /etc/nginx/sites-enabled/snapped_backend
sudo rm -f /etc/nginx/sites-enabled/default

# Safety: remove any stray ssl directives that would break nginx -t
sudo sed -i -E 's/^\s*(ssl_certificate(_key)?\s+)/# \1/' /etc/nginx/nginx.conf || true
sudo sed -i -E 's/^\s*(ssl_certificate(_key)?\s+)/# \1/' /etc/nginx/sites-available/* || true
sudo sed -i -E 's/^\s*(ssl_certificate(_key)?\s+)/# \1/' /etc/nginx/conf.d/*.conf || true

sudo nginx -t
sudo systemctl enable nginx
sudo systemctl restart nginx

#----------------------------
# Gunicorn via systemd (ONLY)
#----------------------------
echo "⚙️ Creating systemd service for Gunicorn..."
sudo tee /etc/systemd/system/snapped_backend.service >/dev/null <<'EOF'
[Unit]
Description=Snapped Backend API (Gunicorn)
After=network.target

[Service]
Type=simple
User=snapped
Group=snapped
WorkingDirectory=/opt/snapped_backend
Environment=PATH=/opt/snapped_backend/venv/bin
ExecStart=/opt/snapped_backend/venv/bin/gunicorn -c /opt/snapped_backend/gunicorn.conf.py app.main:app
ExecReload=/bin/kill -s HUP $MAINPID
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
EOF

sudo systemctl daemon-reload
sudo systemctl enable snapped_backend
sudo systemctl restart snapped_backend

#----------------------------
# Firewall
#----------------------------
echo "🔥 Configuring firewall..."
sudo ufw allow ssh
sudo ufw allow 'Nginx Full'   # ok even if only HTTP now
sudo ufw --force enable

#----------------------------
# DB init (optional; adjust import paths)
#----------------------------
echo "🗄️ Initializing database..."
sudo -u snapped bash <<'EOF'
set -euo pipefail
cd /opt/snapped_backend
source venv/bin/activate
python - <<'PY'
import asyncio
try:
    from app.db.init_db import init_db
    from app.db.optimize import optimize_database
except Exception as e:
    print("Skipping DB init; modules not found or error:", e)
else:
    asyncio.run(init_db())
    optimize_database()
PY
EOF

#----------------------------
# Log rotate
#----------------------------
echo "📋 Setting up log rotation..."
sudo tee /etc/logrotate.d/snapped_backend >/dev/null <<'EOF'
/var/log/snapped/*.log {
    daily
    missingok
    rotate 52
    compress
    delaycompress
    notifempty
    create 0644 snapped snapped
    postrotate
        systemctl reload snapped_backend >/dev/null 2>&1 || true
    endscript
}
EOF

#----------------------------
# Health check script
#----------------------------
echo "🏥 Creating health check script..."
sudo tee /opt/snapped_backend/health_check.sh >/dev/null <<'EOF'
#!/bin/bash
response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/health)
if [ "$response" -eq 200 ]; then
  echo "✅ Service is healthy"
  exit 0
else
  echo "❌ Service is unhealthy (HTTP $response)"
  exit 1
fi
EOF
sudo chmod +x /opt/snapped_backend/health_check.sh

#----------------------------
# Backup script (SQLite example; adjust paths for your DB)
#----------------------------
echo "💾 Creating backup script..."
sudo tee /opt/snapped_backend/backup.sh >/dev/null <<'EOF'
#!/bin/bash
set -euo pipefail
BACKUP_DIR="/opt/backups/snapped"
DATE=$(date +%Y%m%d_%H%M%S)
mkdir -p "$BACKUP_DIR"

# Backup database (edit path if your DB is elsewhere)
if [ -f /opt/snapped_backend/app.db ]; then
  cp /opt/snapped_backend/app.db "$BACKUP_DIR/app_${DATE}.db"
fi

# Backup uploaded files
if [ -d /opt/snapped_backend/app/static/uploads ]; then
  tar -czf "$BACKUP_DIR/uploads_${DATE}.tar.gz" -C /opt/snapped_backend/app/static uploads/
fi

# Keep only last 7 days of backups
find "$BACKUP_DIR" -name "*.db" -mtime +7 -delete || true
find "$BACKUP_DIR" -name "*.tar.gz" -mtime +7 -delete || true
echo "Backup completed: $DATE"
EOF
sudo chmod +x /opt/snapped_backend/backup.sh

#----------------------------
# Cron for backups
#----------------------------
echo "⏰ Setting up automated backups..."
( sudo crontab -l 2>/dev/null; echo "0 2 * * * /opt/snapped_backend/backup.sh >> /var/log/snapped/backup.log 2>&1" ) | sudo crontab -

#----------------------------
# Final status
#----------------------------
echo "🔍 Checking service status..."
sudo systemctl --no-pager status snapped_backend || true
sudo systemctl --no-pager status nginx || true
sudo systemctl --no-pager status redis-server || true

echo ""
echo "🎉 Installation completed!"
echo ""
echo "📋 Next steps:"
echo "1) Edit /opt/snapped_backend/.env with real config"
echo "2) Point a REAL domain to this server (A record to public IP)"
echo "3) Update 'server_name' in /etc/nginx/sites-available/snapped_backend"
echo "4) Issue TLS cert:  sudo certbot --nginx -d your-domain.com -d www.your-domain.com"
echo "5) Verify:         sudo nginx -t && sudo systemctl reload nginx"
echo ""
echo "🧰 Useful commands:"
echo "- Logs (app):      journalctl -u snapped_backend -f"
echo "- Restart app:     sudo systemctl restart snapped_backend"
echo "- Nginx test:      sudo nginx -t"
echo "- Health:          /opt/snapped_backend/health_check.sh"
echo "- Manual backup:   /opt/snapped_backend/backup.sh"
echo ""
echo "🔧 Config paths:"
echo "- App:             /opt/snapped_backend"
echo "- Env:             /opt/snapped_backend/.env"
echo "- Gunicorn conf:   /opt/snapped_backend/gunicorn.conf.py"
echo "- Nginx site:      /etc/nginx/sites-available/snapped_backend"
echo "- Rate limits:     /etc/nginx/conf.d/snapped_rate_limit.conf"
echo "- Logs:            /var/log/snapped/*.log"
